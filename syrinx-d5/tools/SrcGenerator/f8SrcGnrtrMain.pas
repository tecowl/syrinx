unit f8SrcGnrtrMain;

interface

uses
  Windows, Messages, SysUtils, Classes, Graphics, Controls, Forms, Dialogs,
  Grids, StdCtrls, ExtCtrls, ComCtrls, ActnList,
  s0StringReplacer;

type
  Tfrm8SrcGnrtr = class(TForm)
    Panel1: TPanel;
    grdTag: TStringGrid;
    edtTagFooter: TEdit;
    edtTagHeader: TEdit;
    Label1: TLabel;
    Label2: TLabel;
    Splitter1: TSplitter;
    PageControl1: TPageControl;
    TabSheet1: TTabSheet;
    TabSheet2: TTabSheet;
    edtSource: TRichEdit;
    edtDest: TRichEdit;
    Button1: TButton;
    Button2: TButton;
    Button3: TButton;
    Button4: TButton;
    Button5: TButton;
    ActionList1: TActionList;
    actOpenTemplate: TAction;
    actRefreshTaggedWords: TAction;
    actSaveExpandedFile: TAction;
    actLoadTaggedWords: TAction;
    actSaveTaggedWords: TAction;
    OpenDialog1: TOpenDialog;
    SaveDialog1: TSaveDialog;
    actExpandTemplate: TAction;
    Button6: TButton;
    edtCommentHeader: TEdit;
    edtCommentFooter: TEdit;
    Label3: TLabel;
    Label4: TLabel;
    chkWithGeneratorComment: TCheckBox;
    procedure actOpenTemplateExecute(Sender: TObject);
    procedure actRefreshTaggedWordsExecute(Sender: TObject);
    procedure FormCreate(Sender: TObject);
    procedure FormDestroy(Sender: TObject);
    procedure actExpandTemplateExecute(Sender: TObject);
  private
    FReplacer: Ts0StringReplacer;
    procedure InsertGeneratorCommnet(AText, AParams: TStrings);
  public
  end;

var
  frm8SrcGnrtr: Tfrm8SrcGnrtr;

implementation

{$R *.DFM}


procedure Tfrm8SrcGnrtr.actOpenTemplateExecute(Sender: TObject);
begin
  if not OpenDialog1.Execute then Exit;
  edtSource.Lines.LoadFromFile(OpenDialog1.FileName);
  actRefreshTaggedWords.Execute;
end;

procedure Tfrm8SrcGnrtr.actRefreshTaggedWordsExecute(Sender: TObject);
  procedure CopyToCol(AList: TStrings);
  var
    i: Integer;
  begin
    for i := 0 to AList.Count -1 do
      grdTag.Cells[0, i + grdTag.FixedRows] := AList.Strings[i];
  end;
var
  sl: TStringList;
begin
  sl := TStringList.Create;
  try
    FReplacer.FindTaggedString(edtSource.Lines, sl);
    if sl.Count > 0 then
      grdTag.RowCount := sl.Count + grdTag.FixedRows
    else
      grdTag.RowCount := 2;
    CopyToCol(sl);
  finally
    FreeAndNil(sl);
  end;
end;

procedure Tfrm8SrcGnrtr.FormCreate(Sender: TObject);
begin
  FReplacer := Ts0StringReplacer.Create;
  edtTagHeader.Text := FReplacer.TagHeader;
  edtTagFooter.Text := FReplacer.TagFooter;
  PageControl1.ActivePageIndex := 0;
end;

procedure Tfrm8SrcGnrtr.FormDestroy(Sender: TObject);
begin
  FreeAndNil(FReplacer);
end;

procedure Tfrm8SrcGnrtr.actExpandTemplateExecute(Sender: TObject);
var
  keyWords: TStringList;
  i: Integer;
begin
  keyWords := TStringList.Create;
  try
    for i := grdTag.FixedRows to grdTag.RowCount -1 do
    begin
      if Trim(grdTag.Cells[0, i]) = '' then Continue;
      keyWords.Values[ grdTag.Cells[0, i] ] := grdTag.Cells[1, i];
    end;
    FReplacer.ReplaceText(edtSource.Lines, edtDest.Lines, keyWords);
    if chkWithGeneratorComment.Checked then
      InsertGeneratorCommnet(edtDest.Lines, keyWords);
  finally
    FreeAndNil(keyWords);
  end;
  PageControl1.ActivePageIndex := 1;
end;


const
  c9GeneratorCommentHeader =
    '*******************************************************' +#13#10+
    '  This is generated by "Source Generator" at %s        ' +#13#10 ;

  c9GeneratorCommentFooter =
    '    "Source Generator" Copyright(c) 2001 Takeshi Akima ' +#13#10+
    '*******************************************************';

procedure Tfrm8SrcGnrtr.InsertGeneratorCommnet(AText, AParams: TStrings);
begin
  AText.Insert(0, edtCommentFooter.Text);
  AText.Insert(0, c9GeneratorCommentFooter);
  AText.Insert(0, AParams.Text);
  AText.Insert(0, 'Parameters: ');
  AText.Insert(0, Format(
    c9GeneratorCommentHeader,
    [ DateToStr(Now) +' '+ TimeToStr(Now) ])
    );
  AText.Insert(0, edtCommentHeader.Text);
end;

end.
